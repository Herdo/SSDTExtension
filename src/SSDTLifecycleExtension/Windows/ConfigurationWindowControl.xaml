<UserControl x:Class="SSDTLifecycleExtension.Windows.ConfigurationWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:viewModels="clr-namespace:SSDTLifecycleExtension.ViewModels"
             xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
             xmlns:catalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
             Background="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"
             Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
             mc:Ignorable="d"
             d:DesignHeight="300"
             d:DesignWidth="300"
             d:DataContext="{d:DesignInstance viewModels:ConfigurationViewModel,IsDesignTimeCreatable=False}">

    <UserControl.Resources>
        <Style x:Key="VerticalErrorTemplate" TargetType="Control">
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <StackPanel>
                            <AdornedElementPlaceholder/>
                            <ItemsControl ItemsSource="{Binding}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding ErrorContent}" Foreground="Red"/>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </StackPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="HorizontalErrorTemplate" TargetType="Control">
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <StackPanel Orientation="Horizontal">
                            <AdornedElementPlaceholder/>
                            <ItemsControl ItemsSource="{Binding}"
                                          Margin="5,0,0,0">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding ErrorContent}"
                                                   Foreground="Red"/>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </StackPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="GroupBox" x:Key="SettingsGroupStyle">
            <Setter Property="Padding" Value="5"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="Margin" Value="0,0,0,10"/>
        </Style>
        <Style TargetType="TextBlock" x:Key="ConfigurationDescriptionTextBlockStyle">
            <Setter Property="Width" Value="250"/>
            <Setter Property="Margin" Value="5, 5, 10, 15"/>
        </Style>
        <Style TargetType="Run" x:Key="HeaderRunStyle">
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="BaselineAlignment" Value="Top"/>
        </Style>
        <Style TargetType="Run" x:Key="HighlightRunStyle">
            <Setter Property="FontStyle" Value="Italic"/>
            <Setter Property="Foreground" Value="Navy"/>
        </Style>
        <Style TargetType="imaging:CrispImage" x:Key="HelpCrispImageStyle">
            <Setter Property="Height" Value="16"/>
            <Setter Property="Width" Value="16"/>
        </Style>
        <Style TargetType="imaging:CrispImage" x:Key="ButtonCrispImageStyle">
            <Setter Property="Margin" Value="0,0,5,0"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Width" Value="16"/>
        </Style>

        <!-- CheckBox Styles -->
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
        <Style x:Key="OptionMarkFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
        <Style TargetType="CheckBox" x:Key="ConfigurationCheckBoxStyle" BasedOn="{StaticResource HorizontalErrorTemplate}">
            <Setter Property="Margin" Value="0,5,0,0"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid x:Name="markGrid">
                                    <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                                    <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/>
                                </Grid>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="true">
                                <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                <Setter Property="Padding" Value="4,-1,0,0"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                                <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                                <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                            </Trigger>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="Red"/>
                                <Setter Property="BorderThickness" TargetName="checkBoxBorder" Value="2"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Text Box Styles -->
        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
        <Style TargetType="TextBox" x:Key="DefaultTextTextBoxStyle" BasedOn="{StaticResource VerticalErrorTemplate}">
            <Setter Property="AcceptsReturn" Value="False"/>
            <Setter Property="Margin" Value="0,5,0,0"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                            </Trigger>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="Red"/>
                                <Setter Property="BorderThickness" TargetName="border" Value="2"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="TextBox" x:Key="MultiLineTextTextBoxStyle" BasedOn="{StaticResource DefaultTextTextBoxStyle}">
            <Setter Property="AcceptsReturn" Value="True" />
            <Setter Property="Height" Value="150" />
        </Style>

        <!-- Button Styles -->
        <Style TargetType="Button" x:Key="ActionButtonStyle">
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Padding" Value="10, 5"/>
        </Style>
        <Style TargetType="Button" x:Key="SaveButtonStyle" BasedOn="{StaticResource ActionButtonStyle}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsModelDirty}" Value="True">
                    <DataTrigger.Setters>
                        <Setter Property="BorderBrush" Value="Red"/>
                        <Setter Property="BorderThickness" Value="3"/>
                        <Setter Property="Margin" Value="3"/>
                    </DataTrigger.Setters>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="Button" x:Key="HelpButtonStyle">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <imaging:CrispImage Style="{StaticResource HelpCrispImageStyle}"
                                            Moniker="{x:Static catalog:KnownMonikers.StatusHelp}"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="10"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Content -->
        <ScrollViewer Grid.Row="0"
                      VerticalScrollBarVisibility="Auto"
                      HorizontalScrollBarVisibility="Disabled"
                      Margin="10,10,10,0">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="10"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column="0">
                    <!-- Paths -->
                    <GroupBox Style="{StaticResource SettingsGroupStyle}"
                              Header="Paths">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!-- Artifacts path -->
                            <TextBlock Grid.Row="0"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Artifacts path"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="artifacts-path"/>
                                <LineBreak/>
                                <Run Text="The path where the artifacts (DACPACs,"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="Script and Documentation) will be saved."
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <LineBreak/>
                                <Run Text="Relative path to the *.sqlproj file."
                                     FontStyle="Italic"/>
                            </TextBlock>
                            <TextBox Grid.Row="0"
                                     Grid.Column="1"
                                     Style="{StaticResource DefaultTextTextBoxStyle}"
                                     Text="{Binding Model.ArtifactsPath, Mode=TwoWay}"/>

                            <!-- Publish profile  path -->
                            <TextBlock Grid.Row="1"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Publish profile path"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="publish-profile-path"/>
                                <LineBreak/>
                                <Run Text="The path to the publish profile"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="used for script creation."
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <LineBreak/>
                                <Run Text="Relative path to the *.sqlproj file,"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="or the special keyword"/>
                                <Run Text="{}{SINGLE_PROFILE}"
                                     Style="{StaticResource HighlightRunStyle}"/><Run Text="."/>
                            </TextBlock>
                            <Grid Grid.Row="1"
                                  Grid.Column="1"
                                  HorizontalAlignment="Stretch"
                                  Margin="0,5,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <TextBox Grid.Column="0"
                                         x:Name="PublishProfilePathTextBox"
                                         Style="{StaticResource DefaultTextTextBoxStyle}"
                                         Margin="0,0,5,0"
                                         Text="{Binding Model.PublishProfilePath, Mode=TwoWay, ValidatesOnDataErrors=True}"/>
                                <Button Grid.Column="1"
                                        Command="{Binding BrowsePublishProfileCommand}"
                                        VerticalAlignment="Top"
                                        Height="{Binding ElementName=PublishProfilePathTextBox, Path=ActualHeight}"
                                        Padding="5,0"
                                        Content="..."
                                        ToolTip="Browse..."/>
                            </Grid>
                        </Grid>
                    </GroupBox>
                    <!-- Script creation options -->
                    <GroupBox Style="{StaticResource SettingsGroupStyle}"
                              Header="Script Creation Options">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!-- Build before script creation -->
                            <TextBlock Grid.Row="0"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Build before script creation"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="build-before-script-creation"/>
                            </TextBlock>
                            <CheckBox Grid.Row="0"
                                      Grid.Column="1"
                                      Style="{StaticResource ConfigurationCheckBoxStyle}"
                                      IsChecked="{Binding Model.BuildBeforeScriptCreation, Mode=TwoWay}"/>
                            
                            <!-- Create documentation with script creation -->
                            <TextBlock Grid.Row="1"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Create documentation"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="create-documentation"/>
                            </TextBlock>
                            <CheckBox Grid.Row="1"
                                      Grid.Column="1"
                                      Style="{StaticResource ConfigurationCheckBoxStyle}"
                                      IsChecked="{Binding Model.CreateDocumentationWithScriptCreation, Mode=TwoWay}"/>

                            <!-- Comment out unnamed default constraint drops -->
                            <TextBlock Grid.Row="2"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Comment out unnamed default constraint"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <LineBreak/>
                                <Run Text="drops"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="comment-out-unnamed-default-constraint-drops"/>
                            </TextBlock>
                            <CheckBox Grid.Row="2"
                                      Grid.Column="1"
                                      Style="{StaticResource ConfigurationCheckBoxStyle}"
                                      IsChecked="{Binding Model.CommentOutUnnamedDefaultConstraintDrops, Mode=TwoWay}"/>

                            <!-- Replace unnamed default constraint drops -->
                            <TextBlock Grid.Row="3"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Replace unnamed default constraint"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <LineBreak/>
                                <Run Text="drops"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="replace-unnamed-default-constraint-drops"/>
                                <LineBreak/>
                                <Run Text="Replaces unnamed default constraint drops"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="with dynamic drop statements, that will"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="determine the actual default constraint"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="name when executing."
                                     FontStyle="Italic"/>
                            </TextBlock>
                            <CheckBox Grid.Row="3"
                                      Grid.Column="1"
                                      Style="{StaticResource ConfigurationCheckBoxStyle}"
                                      IsChecked="{Binding Model.ReplaceUnnamedDefaultConstraintDrops, Mode=TwoWay}"/>

                            <!-- Remove SQLCMD statements -->
                            <TextBlock Grid.Row="4"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Remove SQLCMD statements"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="remove-sqlcmd-statements"/>
                                <LineBreak/>
                                <Run Text="Removes all SQLCMD related statements"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="from the script."
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <LineBreak/>
                                <Run Text="Only check this option if you want to"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="execute the script without SQLCMD mode."
                                     FontStyle="Italic"/>
                            </TextBlock>
                            <CheckBox Grid.Row="4"
                                      Grid.Column="1"
                                      Style="{StaticResource ConfigurationCheckBoxStyle}"
                                      IsChecked="{Binding Model.RemoveSqlCmdStatements, Mode=TwoWay}"/>
                        </Grid>
                    </GroupBox>
                    <!-- Cleanup -->
                    <GroupBox Style="{StaticResource SettingsGroupStyle}"
                              Header="Cleanup">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!-- Delete refactorlog after versioned script generation -->
                            <TextBlock Grid.Row="0"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Delete refactorlog after versioned script"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <LineBreak/>
                                <Run Text="generation"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="delete-refactorlog-after-versioned-script-generation"/>
                            </TextBlock>
                            <CheckBox Grid.Row="0"
                                      Grid.Column="1"
                                      Style="{StaticResource ConfigurationCheckBoxStyle}"
                                      IsChecked="{Binding Model.DeleteRefactorlogAfterVersionedScriptGeneration, Mode=TwoWay}"/>

                            <!-- Delete latest after versioned script generation -->
                            <TextBlock Grid.Row="1"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Delete 'latest' files after versioned script"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <LineBreak/>
                                <Run Text="generation"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="delete-latest-files-after-versioned-script"/>
                            </TextBlock>
                            <CheckBox Grid.Row="1"
                                      Grid.Column="1"
                                      Style="{StaticResource ConfigurationCheckBoxStyle}"
                                      IsChecked="{Binding Model.DeleteLatestAfterVersionedScriptGeneration, Mode=TwoWay}"/>
                        </Grid>
                    </GroupBox>
                </StackPanel>
                <StackPanel Grid.Column="2">
                    <!-- Version Management -->
                    <GroupBox Style="{StaticResource SettingsGroupStyle}"
                              Header="Version Management">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!-- Version pattern -->
                            <TextBlock Grid.Row="0"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Version pattern"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="version-pattern"/>
                                <LineBreak/>
                                <Run Text="The version pattern used during"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="generation as well as version history."
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <LineBreak/>
                                <Run Text="Use these special keywords:"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="{}{MAJOR}"
                                     Style="{StaticResource HighlightRunStyle}"/>
                                <LineBreak/>
                                <Run Text="{}{MINOR}"
                                     Style="{StaticResource HighlightRunStyle}"/>
                                <LineBreak/>
                                <Run Text="{}{BUILD}"
                                     Style="{StaticResource HighlightRunStyle}"/>
                                <LineBreak/>
                                <Run Text="{}{REVISION}"
                                     Style="{StaticResource HighlightRunStyle}"/>
                            </TextBlock>
                            <TextBox Grid.Row="0"
                                     Grid.Column="1"
                                     Style="{StaticResource DefaultTextTextBoxStyle}"
                                     Text="{Binding Model.VersionPattern, Mode=TwoWay}"/>

                            <!-- Track DACPAC version -->
                            <TextBlock Grid.Row="1"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Track DACPAC version"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="track-dacpac-version"/>
                                <LineBreak/>
                                <Run Text="Tracks the version of this DACPAC in a"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="central table inside the database itself."
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="This will create the table"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="[dbo].[__DacpacVersion]"
                                     Style="{StaticResource HighlightRunStyle}"/>
                                <Run Text="if it doesn't exist,"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="and insert the version number when deploying."
                                     FontStyle="Italic"/>
                            </TextBlock>
                            <CheckBox Grid.Row="1"
                                      Grid.Column="1"
                                      Style="{StaticResource ConfigurationCheckBoxStyle}"
                                      IsChecked="{Binding Model.TrackDacpacVersion, Mode=TwoWay}"/>
                        </Grid>
                    </GroupBox>
                    <!-- Custom Texts -->
                    <GroupBox Style="{StaticResource SettingsGroupStyle}"
                              Header="Custom Texts">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!-- Custom Header -->
                            <TextBlock Grid.Row="0"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Custom header"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="custom-header"/>
                                <LineBreak/>
                                <Run Text="The custom header will be placed above"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="the created script."
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <LineBreak/>
                                <Run Text="Leave blank to not use the custom header."
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <LineBreak/>
                                <Run Text="Use these special keywords:"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="{}{PREVIOUS_VERSION}"
                                     Style="{StaticResource HighlightRunStyle}"/>
                                <LineBreak/>
                                <Run Text="{}{NEXT_VERSION}"
                                     Style="{StaticResource HighlightRunStyle}"/>
                            </TextBlock>
                            <TextBox Grid.Row="0"
                                     Grid.Column="1"
                                     Style="{StaticResource MultiLineTextTextBoxStyle}"
                                     Text="{Binding Model.CustomHeader, Mode=TwoWay}"/>

                            <!-- Custom Footer -->
                            <TextBlock Grid.Row="1"
                                       Grid.Column="0"
                                       Style="{StaticResource ConfigurationDescriptionTextBlockStyle}">
                                <Run Text="Custom footer"
                                     Style="{StaticResource HeaderRunStyle}"/>
                                <Button Style="{StaticResource HelpButtonStyle}"
                                        Command="{Binding OpenDocumentationCommand}"
                                        CommandParameter="custom-footer"/>
                                <LineBreak/>
                                <Run Text="The custom footer will be placed beneath"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="the created script."
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <LineBreak/>
                                <Run Text="Leave blank to not use the custom footer."
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <LineBreak/>
                                <Run Text="Use these special keywords:"
                                     FontStyle="Italic"/>
                                <LineBreak/>
                                <Run Text="{}{PREVIOUS_VERSION}"
                                     Style="{StaticResource HighlightRunStyle}"/>
                                <LineBreak/>
                                <Run Text="{}{NEXT_VERSION}"
                                     Style="{StaticResource HighlightRunStyle}"/>
                            </TextBlock>
                            <TextBox Grid.Row="1"
                                     Grid.Column="1"
                                     Style="{StaticResource MultiLineTextTextBoxStyle}"
                                     Text="{Binding Model.CustomFooter, Mode=TwoWay}"/>
                        </Grid>
                    </GroupBox>
                </StackPanel>
            </Grid>
        </ScrollViewer>

        <Rectangle Grid.Row="1"
                   HorizontalAlignment="Stretch"
                   VerticalAlignment="Top"
                   Height="4"
                   Fill="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBorderKey}}"/>

        <!-- Actions -->
        <Grid Grid.Row="2"
              Margin="10,0,10,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="0"
                        Orientation="Horizontal"
                        HorizontalAlignment="Left">
                <Button Command="{Binding ImportConfigurationCommand}"
                        Style="{StaticResource ActionButtonStyle}">
                    <StackPanel Orientation="Horizontal">
                        <imaging:CrispImage Style="{StaticResource ButtonCrispImageStyle}"
                                            Moniker="{x:Static catalog:KnownMonikers.Import}"/>
                        <TextBlock Text="Import configuration ..."/>
                    </StackPanel>
                </Button>
            </StackPanel>

            <StackPanel Grid.Column="1"
                        Orientation="Horizontal"
                        HorizontalAlignment="Right">
                <Button Command="{Binding ResetConfigurationToDefaultCommand}"
                        Style="{StaticResource ActionButtonStyle}">
                    <StackPanel Orientation="Horizontal">
                        <imaging:CrispImage Style="{StaticResource ButtonCrispImageStyle}"
                                            Moniker="{x:Static catalog:KnownMonikers.Restart}"/>
                        <TextBlock Text="Reset configuration to default"/>
                    </StackPanel>
                </Button>
                <Button Command="{Binding SaveConfigurationCommand}"
                        Style="{StaticResource SaveButtonStyle}">
                    <StackPanel Orientation="Horizontal">
                        <imaging:CrispImage Style="{StaticResource ButtonCrispImageStyle}"
                                            Moniker="{x:Static catalog:KnownMonikers.Save}"/>
                        <TextBlock Text="Save configuration"/>
                    </StackPanel>
                </Button>
            </StackPanel>
        </Grid>
    </Grid>
</UserControl>
